snippet dpd
	/**
	 * @dataProvider provide${1:dataprovider}
	 */
snippet dpdf
	public function provide${1:dataprovider}()
	{
		return [
			[${2}],
		];
	}

snippet zffactory
	<?php
	namespace ${1:namespace};

	use Zend\ServiceManager\FactoryInterface;
	use Zend\ServiceManager\ServiceLocatorInterface;

	class ${2:Factory}Factory implements FactoryInterface
	{
		public function createService(ServiceLocatorInterface $serviceLocator)
		{
			${3}
		}
	}
snippet unittest
	<?php
	namespace ${1:namespace};

	use ${2:subjectuse};

	class ${3:testclass}Test extends \PHPUnit_Framework_TestCase
	{
		private $${4:subjectproperty};

		protected function setUp()
		{
			$this->${5:subjectproperty} = new ${6:subject};
		}
	}
snippet unittestzffactory
	<?php
	namespace ${1:namespace};

	use ${2:factoryuse}Factory;
	use Zend\ServiceManager\ServiceManager;

	class ${3:testclass}FactoryTest extends \PHPUnit_Framework_TestCase
	{
		private $serviceManager;
		private $factory;

		protected function setUp()
		{
			$this->serviceManager = new ServiceManager;
			$this->factory        = new ${4:factory}Factory;
		}

		public function testIsZfFactory()
		{
			$this->assertInstanceOf('Zend\ServiceManager\FactoryInterface', $this->factory);
		}

		public function testCreates${5:factorycreates}()
		{
			$this->assertInstanceOf(
				'${6:instance}',
				$this->factory->createService($this->serviceManager)
			);
		}
	}
snippet zfcontroller
	<?php
	namespace ${1:namespace};

	use Zend\Mvc\Controller\AbstractActionController;

	class ${2}Controller extends AbstractActionController
	{
		public function ${3}Action()
		{
		}
	}

snippet zfvalidator
	<?php
	namespace ${1:namespace};

	use Zend\Validator\AbstractValidator;

	class ${2} extends AbstractValidator
	{
		protected $messageTemplates = array(
		);

		public function isValid($value)
		{
			$this->setValue($value);
			${3}
		}
	}

snippet setter
	public function set${1:ParamName}($${2:paramName})
	{
		$this->$2 = $$2;
		return $this;
	}

snippet getter
	public function get${1:ParamName}()
	{
		return $this->${2:paramName};
	}

snippet getset
	public function set${1:ParamName}($${2:paramName})
	{
		$this->$2 = $$2;
	 	return $this;
	}

	public function get$1()
	{
		return $this->$2;
	}

